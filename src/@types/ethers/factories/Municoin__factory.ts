/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Municoin, MunicoinInterface } from "../Municoin";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280600881526020017f4d756e69636f696e000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000127565b506040518060400160405280600481526020017f4d554e4900000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000127565b50348015620000ad57600080fd5b50604051620010d5380380620010d58339818101604052810190620000d3919062000217565b80600281905550600254600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050620002ae565b828054620001359062000278565b90600052602060002090601f016020900481019282620001595760008555620001a5565b82601f106200017457805160ff1916838001178555620001a5565b82800160010185558215620001a5579182015b82811115620001a457825182559160200191906001019062000187565b5b509050620001b49190620001b8565b5090565b5b80821115620001d3576000816000905550600101620001b9565b5090565b600080fd5b6000819050919050565b620001f181620001dc565b8114620001fd57600080fd5b50565b6000815190506200021181620001e6565b92915050565b60006020828403121562000230576200022f620001d7565b5b6000620002408482850162000200565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200029157607f821691505b60208210811415620002a857620002a762000249565b5b50919050565b610e1780620002be6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a082311461012957806395d89b4114610159578063a9059cbb14610177578063dd62ed3e146101a757610088565b806306fdde031461008d578063095ea7b3146100ab57806318160ddd146100db57806323b872dd146100f9575b600080fd5b6100956101d7565b6040516100a291906109d4565b60405180910390f35b6100c560048036038101906100c09190610a8f565b610265565b6040516100d29190610aea565b60405180910390f35b6100e36103d9565b6040516100f09190610b14565b60405180910390f35b610113600480360381019061010e9190610b2f565b6103df565b6040516101209190610aea565b60405180910390f35b610143600480360381019061013e9190610b82565b6106d1565b6040516101509190610b14565b60405180910390f35b6101616106e9565b60405161016e91906109d4565b60405180910390f35b610191600480360381019061018c9190610a8f565b610777565b60405161019e9190610aea565b60405180910390f35b6101c160048036038101906101bc9190610baf565b610916565b6040516101ce9190610b14565b60405180910390f35b600080546101e490610c1e565b80601f016020809104026020016040519081016040528092919081815260200182805461021090610c1e565b801561025d5780601f106102325761010080835404028352916020019161025d565b820191906000526020600020905b81548152906001019060200180831161024057829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156102e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e090610c9c565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103c79190610b14565b60405180910390a36001905092915050565b60025481565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610c9c565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610d08565b60405180910390fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105719190610d57565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c79190610d8b565b9250508190555081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065a9190610d57565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106be9190610b14565b60405180910390a3600190509392505050565b60036020528060005260406000206000915090505481565b600180546106f690610c1e565b80601f016020809104026020016040519081016040528092919081815260200182805461072290610c1e565b801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f290610c9c565b60405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461084a9190610d57565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108a09190610d8b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109049190610b14565b60405180910390a36001905092915050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b8381101561097557808201518184015260208101905061095a565b83811115610984576000848401525b50505050565b6000601f19601f8301169050919050565b60006109a68261093b565b6109b08185610946565b93506109c0818560208601610957565b6109c98161098a565b840191505092915050565b600060208201905081810360008301526109ee818461099b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a26826109fb565b9050919050565b610a3681610a1b565b8114610a4157600080fd5b50565b600081359050610a5381610a2d565b92915050565b6000819050919050565b610a6c81610a59565b8114610a7757600080fd5b50565b600081359050610a8981610a63565b92915050565b60008060408385031215610aa657610aa56109f6565b5b6000610ab485828601610a44565b9250506020610ac585828601610a7a565b9150509250929050565b60008115159050919050565b610ae481610acf565b82525050565b6000602082019050610aff6000830184610adb565b92915050565b610b0e81610a59565b82525050565b6000602082019050610b296000830184610b05565b92915050565b600080600060608486031215610b4857610b476109f6565b5b6000610b5686828701610a44565b9350506020610b6786828701610a44565b9250506040610b7886828701610a7a565b9150509250925092565b600060208284031215610b9857610b976109f6565b5b6000610ba684828501610a44565b91505092915050565b60008060408385031215610bc657610bc56109f6565b5b6000610bd485828601610a44565b9250506020610be585828601610a44565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c3657607f821691505b60208210811415610c4a57610c49610bef565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610c86601483610946565b9150610c9182610c50565b602082019050919050565b60006020820190508181036000830152610cb581610c79565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000610cf2601683610946565b9150610cfd82610cbc565b602082019050919050565b60006020820190508181036000830152610d2181610ce5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6282610a59565b9150610d6d83610a59565b925082821015610d8057610d7f610d28565b5b828203905092915050565b6000610d9682610a59565b9150610da183610a59565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dd657610dd5610d28565b5b82820190509291505056fea2646970667358221220be3aca28fbdd39743401fe1d5a69504d5817cf935f7b39b4de1fcfd28c7d3aca64736f6c634300080b0033";

type MunicoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MunicoinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Municoin__factory extends ContractFactory {
  constructor(...args: MunicoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Municoin";
  }

  deploy(
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Municoin> {
    return super.deploy(_initialSupply, overrides || {}) as Promise<Municoin>;
  }
  getDeployTransaction(
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_initialSupply, overrides || {});
  }
  attach(address: string): Municoin {
    return super.attach(address) as Municoin;
  }
  connect(signer: Signer): Municoin__factory {
    return super.connect(signer) as Municoin__factory;
  }
  static readonly contractName: "Municoin";
  public readonly contractName: "Municoin";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MunicoinInterface {
    return new utils.Interface(_abi) as MunicoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Municoin {
    return new Contract(address, _abi, signerOrProvider) as Municoin;
  }
}
